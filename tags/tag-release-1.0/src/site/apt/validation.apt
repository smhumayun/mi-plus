    Pre-Requisite: {{{./index.html}Getting Started}}

Validations

    Before any <<<MISupport>>><ed>
    ({{{./apidocs/com/smhumayun/mi_plus/MISupport.html}JavaDoc}}
    | {{{./xref/com/smhumayun/mi_plus/MISupport.html}Source Code}})
    class is instantiated, it must be validated as follows:

    [[1]] Must contain <<<MISupport>>>
    ({{{./apidocs/com/smhumayun/mi_plus/MISupport.html}JavaDoc}}
    | {{{./xref/com/smhumayun/mi_plus/MISupport.html}Source Code}})
    annotation

    [[2]] <<<MISupport>>>
    ({{{./apidocs/com/smhumayun/mi_plus/MISupport.html}JavaDoc}}
    | {{{./xref/com/smhumayun/mi_plus/MISupport.html}Source Code}})
    annotation must contain <<<parentClasses>>> attribute

    [[3]] <<<parentClass>>> attribute must contain at least one Parent class

    [[4]] Parent must not be an <<<interface>>>

    [[5]] Parent must not be <<<abstract>>>

    [[6]] Parent must have a public no-arguments constructor - [Read more about this
    {{{http://codeoftheday.blogspot.com/2013/07/no-arguments-default-constructor-and.html}here}}]

    An <<<MIException>>>
    ({{{./apidocs/com/smhumayun/mi_plus/MIException.html}JavaDoc}}
    | {{{./xref/com/smhumayun/mi_plus/MIException.html}Source Code}})
    will be thrown if any one of the above condition fails.

Eager Validation (Recommended)

    It is recommended to perform eager validation because all <<<MISupport>>><ed>
    ({{{./apidocs/com/smhumayun/mi_plus/MISupport.html}JavaDoc}}
    | {{{./xref/com/smhumayun/mi_plus/MISupport.html}Source Code}})
    classes will be pre-validated and in case of any errors, the program will fail early, at the time of
    initialization or bootstrapping. Contrary to this, in case of lazy validation, if there's a problem in one or more
    of the <<<MISupport>>><ed>
    ({{{./apidocs/com/smhumayun/mi_plus/MISupport.html}JavaDoc}}
    | {{{./xref/com/smhumayun/mi_plus/MISupport.html}Source Code}})
    classes configuration, then the program
    will fail only when <<<MIFactory>>>
    ({{{./apidocs/com/smhumayun/mi_plus/MIFactory.html}JavaDoc}}
    | {{{./xref/com/smhumayun/mi_plus/MIFactory.html}Source Code}})
    tries to instantiate that particular problematic class.

    The <<<MIFactory>>>
    ({{{./apidocs/com/smhumayun/mi_plus/MIFactory.html}JavaDoc}}
    | {{{./xref/com/smhumayun/mi_plus/MIFactory.html}Source Code}})
    supports eager validation and can scan packages to find and pre-validate any classes that are annotated with
    <<<MISupport>>>
    ({{{./apidocs/com/smhumayun/mi_plus/MISupport.html}JavaDoc}}
    | {{{./xref/com/smhumayun/mi_plus/MISupport.html}Source Code}})
    annotation.

    You can use this one-arg constructor <<<MIFactory(java.util.List)>>> of <<<MIFactory>>>
    ({{{./apidocs/com/smhumayun/mi_plus/MIFactory.html##MIFactory(java.util.List)}JavaDoc}}
    | {{{./xref/com/smhumayun/mi_plus/MIFactory.html##MIFactory(java.util.List)}Source Code}})
    to perform eager validation:

+---
import com.smhumayun.mi_plus.MIFactory;
import com.smhumayun.mi_plus.testdata.Child1;

...
    //eager validation - validation happens as soon as following statement executes
    MIFactory miFactory = new MIFactory(Arrays.asList("com.smhumayun.mi_plus.testdata"));

    miFactory.newInstance(Child1.class); //validation will be skipped because it has been pre-validated above
...
+---

    All classes inside the <<<testdata>>> package and any sub-packages will be scanned and processed accordingly.

    As soon as you try to instantiate an <<<MIFactory>>>
    ({{{./apidocs/com/smhumayun/mi_plus/MIFactory.html}JavaDoc}}
    | {{{./xref/com/smhumayun/mi_plus/MIFactory.html}Source Code}})
    instance, it will scan of your supplied packages to find any classes that are annotated with
    <<<MISupport>>>
    ({{{./apidocs/com/smhumayun/mi_plus/MISupport.html}JavaDoc}}
    | {{{./xref/com/smhumayun/mi_plus/MISupport.html}Source Code}})
    annotation. Once located, it will pre-validate all of them and will only return the factory instance if all goes
    well, else it will throw an <<<MIException>>>
    ({{{./apidocs/com/smhumayun/mi_plus/MIException.html}JavaDoc}}
    | {{{./xref/com/smhumayun/mi_plus/MIException.html}Source Code}})
    indicating the problems it encountered during the scanning and/or validation process.

Lazy Validation

    In case of lazy validation (also called on-demand validation), the validation will perform whenever
    <<<newInstance()>>> of <<<MIFactory>>>
    ({{{./apidocs/com/smhumayun/mi_plus/MIFactory.html}JavaDoc}}
    | {{{./xref/com/smhumayun/mi_plus/MIFactory.html}Source Code}})
    is called for the first time against a given <<<Class>>>. Any subsequent <<<newInstance()>>> calls for the same
    <<<Class>>> will skip the validation process and proceed with the rest of the instantiation process.

+---
import com.smhumayun.mi_plus.MIFactory;
import com.smhumayun.mi_plus.testdata.Child1;

...
    //lazy validation - no validation will be done in following statement
    MIFactory miFactory = new MIFactory(Arrays.asList("com.smhumayun.mi_plus.testdata"));

    miFactory.newInstance(Child1.class); //first call against Child1; validation will happen here
    miFactory.newInstance(Child1.class); //any subsequent calls after first call; validation will be skipped
...
+---

What's Next?

    {{{./cache.html}Object Scopes and Caching}}